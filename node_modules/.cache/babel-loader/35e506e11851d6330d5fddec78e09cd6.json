{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar defaults = {\n  lines: 12,\n  length: 7,\n  width: 5,\n  radius: 10,\n  scale: 1.0,\n  corners: 1,\n  color: '#000',\n  fadeColor: 'transparent',\n  animation: 'spinner-line-fade-default',\n  rotate: 0,\n  direction: 1,\n  speed: 1,\n  zIndex: 2e9,\n  className: 'spinner',\n  top: '50%',\n  left: '50%',\n  shadow: '0 0 1px transparent',\n  position: 'absolute'\n};\n\nvar Spinner =\n/** @class */\nfunction () {\n  function Spinner(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    this.opts = __assign(__assign({}, defaults), opts);\n  }\n  /**\r\n   * Adds the spinner to the given target element. If this instance is already\r\n   * spinning, it is automatically removed from its previous target by calling\r\n   * stop() internally.\r\n   */\n\n\n  Spinner.prototype.spin = function (target) {\n    this.stop();\n    this.el = document.createElement('div');\n    this.el.className = this.opts.className;\n    this.el.setAttribute('role', 'progressbar');\n    css(this.el, {\n      position: this.opts.position,\n      width: 0,\n      zIndex: this.opts.zIndex,\n      left: this.opts.left,\n      top: this.opts.top,\n      transform: \"scale(\" + this.opts.scale + \")\"\n    });\n\n    if (target) {\n      target.insertBefore(this.el, target.firstChild || null);\n    }\n\n    drawLines(this.el, this.opts);\n    return this;\n  };\n  /**\r\n   * Stops and removes the Spinner.\r\n   * Stopped spinners may be reused by calling spin() again.\r\n   */\n\n\n  Spinner.prototype.stop = function () {\n    if (this.el) {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        cancelAnimationFrame(this.animateId);\n      } else {\n        clearTimeout(this.animateId);\n      }\n\n      if (this.el.parentNode) {\n        this.el.parentNode.removeChild(this.el);\n      }\n\n      this.el = undefined;\n    }\n\n    return this;\n  };\n\n  return Spinner;\n}();\n\nexport { Spinner };\n/**\r\n * Sets multiple style properties at once.\r\n */\n\nfunction css(el, props) {\n  for (var prop in props) {\n    el.style[prop] = props[prop];\n  }\n\n  return el;\n}\n/**\r\n * Returns the line color from the given string or array.\r\n */\n\n\nfunction getColor(color, idx) {\n  return typeof color == 'string' ? color : color[idx % color.length];\n}\n/**\r\n * Internal method that draws the individual lines.\r\n */\n\n\nfunction drawLines(el, opts) {\n  var borderRadius = Math.round(opts.corners * opts.width * 500) / 1000 + 'px';\n  var shadow = 'none';\n\n  if (opts.shadow === true) {\n    shadow = '0 2px 4px #000'; // default shadow\n  } else if (typeof opts.shadow === 'string') {\n    shadow = opts.shadow;\n  }\n\n  var shadows = parseBoxShadow(shadow);\n\n  for (var i = 0; i < opts.lines; i++) {\n    var degrees = ~~(360 / opts.lines * i + opts.rotate);\n    var backgroundLine = css(document.createElement('div'), {\n      position: 'absolute',\n      top: -opts.width / 2 + \"px\",\n      width: opts.length + opts.width + 'px',\n      height: opts.width + 'px',\n      background: getColor(opts.fadeColor, i),\n      borderRadius: borderRadius,\n      transformOrigin: 'left',\n      transform: \"rotate(\" + degrees + \"deg) translateX(\" + opts.radius + \"px)\"\n    });\n    var delay = i * opts.direction / opts.lines / opts.speed;\n    delay -= 1 / opts.speed; // so initial animation state will include trail\n\n    var line = css(document.createElement('div'), {\n      width: '100%',\n      height: '100%',\n      background: getColor(opts.color, i),\n      borderRadius: borderRadius,\n      boxShadow: normalizeShadow(shadows, degrees),\n      animation: 1 / opts.speed + \"s linear \" + delay + \"s infinite \" + opts.animation\n    });\n    backgroundLine.appendChild(line);\n    el.appendChild(backgroundLine);\n  }\n}\n\nfunction parseBoxShadow(boxShadow) {\n  var regex = /^\\s*([a-zA-Z]+\\s+)?(-?\\d+(\\.\\d+)?)([a-zA-Z]*)\\s+(-?\\d+(\\.\\d+)?)([a-zA-Z]*)(.*)$/;\n  var shadows = [];\n\n  for (var _i = 0, _a = boxShadow.split(','); _i < _a.length; _i++) {\n    var shadow = _a[_i];\n    var matches = shadow.match(regex);\n\n    if (matches === null) {\n      continue; // invalid syntax\n    }\n\n    var x = +matches[2];\n    var y = +matches[5];\n    var xUnits = matches[4];\n    var yUnits = matches[7];\n\n    if (x === 0 && !xUnits) {\n      xUnits = yUnits;\n    }\n\n    if (y === 0 && !yUnits) {\n      yUnits = xUnits;\n    }\n\n    if (xUnits !== yUnits) {\n      continue; // units must match to use as coordinates\n    }\n\n    shadows.push({\n      prefix: matches[1] || '',\n      x: x,\n      y: y,\n      xUnits: xUnits,\n      yUnits: yUnits,\n      end: matches[8]\n    });\n  }\n\n  return shadows;\n}\n/**\r\n * Modify box-shadow x/y offsets to counteract rotation\r\n */\n\n\nfunction normalizeShadow(shadows, degrees) {\n  var normalized = [];\n\n  for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {\n    var shadow = shadows_1[_i];\n    var xy = convertOffset(shadow.x, shadow.y, degrees);\n    normalized.push(shadow.prefix + xy[0] + shadow.xUnits + ' ' + xy[1] + shadow.yUnits + shadow.end);\n  }\n\n  return normalized.join(', ');\n}\n\nfunction convertOffset(x, y, degrees) {\n  var radians = degrees * Math.PI / 180;\n  var sin = Math.sin(radians);\n  var cos = Math.cos(radians);\n  return [Math.round((x * cos + y * sin) * 1000) / 1000, Math.round((-x * sin + y * cos) * 1000) / 1000];\n}","map":null,"metadata":{},"sourceType":"module"}